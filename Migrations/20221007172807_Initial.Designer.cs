// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tracker.Data;

#nullable disable

namespace tracker.Migrations
{
    [DbContext(typeof(TrackerContext))]
    [Migration("20221007172807_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("Tracker.Models.AlertMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AlertMessages");
                });

            modelBuilder.Entity("Tracker.Models.Checkin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Elapsed")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("When")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SegmentId");

                    b.ToTable("Checkins");
                });

            modelBuilder.Entity("Tracker.Models.Checkpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GeoJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Checkpoints");
                });

            modelBuilder.Entity("Tracker.Models.Leader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CheckinId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CheckpointId")
                        .HasColumnType("TEXT");

                    b.Property<int>("OverallPace")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OverallTime")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CheckinId");

                    b.HasIndex("CheckpointId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SegmentId");

                    b.ToTable("Leaders");
                });

            modelBuilder.Entity("Tracker.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FromCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FromCountry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FromState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FromZip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Received")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Tracker.Models.Monitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CheckpointId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CheckpointId");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("Tracker.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bib")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Linked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("TEXT");

                    b.Property<float>("Rank")
                        .HasColumnType("REAL");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UltraSignupEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Tracker.Models.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Distance")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeoJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RaceEventId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<string>("UltraSignupUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RaceEventId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Tracker.Models.RaceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Current")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RaceEvents");
                });

            modelBuilder.Entity("Tracker.Models.Segment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Distance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("FromCheckpointId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeoJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToCheckpointId")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalDistance")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("FromCheckpointId");

                    b.HasIndex("RaceId");

                    b.HasIndex("ToCheckpointId");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("Tracker.Models.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Tracker.Models.Watcher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Watchers");
                });

            modelBuilder.Entity("Tracker.Models.Checkin", b =>
                {
                    b.HasOne("Tracker.Models.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracker.Models.Participant", "Participant")
                        .WithMany("Checkins")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracker.Models.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Participant");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tracker.Models.Leader", b =>
                {
                    b.HasOne("Tracker.Models.Checkin", "Checkin")
                        .WithMany()
                        .HasForeignKey("CheckinId");

                    b.HasOne("Tracker.Models.Checkpoint", "Checkpoint")
                        .WithMany()
                        .HasForeignKey("CheckpointId");

                    b.HasOne("Tracker.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracker.Models.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId");

                    b.Navigation("Checkin");

                    b.Navigation("Checkpoint");

                    b.Navigation("Participant");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Tracker.Models.Monitor", b =>
                {
                    b.HasOne("Tracker.Models.Checkpoint", "Checkpoint")
                        .WithMany("Monitors")
                        .HasForeignKey("CheckpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checkpoint");
                });

            modelBuilder.Entity("Tracker.Models.Participant", b =>
                {
                    b.HasOne("Tracker.Models.Race", "Race")
                        .WithMany("Participants")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Tracker.Models.Race", b =>
                {
                    b.HasOne("Tracker.Models.RaceEvent", "RaceEvent")
                        .WithMany("Races")
                        .HasForeignKey("RaceEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceEvent");
                });

            modelBuilder.Entity("Tracker.Models.Segment", b =>
                {
                    b.HasOne("Tracker.Models.Checkpoint", "FromCheckpoint")
                        .WithMany()
                        .HasForeignKey("FromCheckpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracker.Models.Race", "Race")
                        .WithMany("Segments")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tracker.Models.Checkpoint", "ToCheckpoint")
                        .WithMany()
                        .HasForeignKey("ToCheckpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromCheckpoint");

                    b.Navigation("Race");

                    b.Navigation("ToCheckpoint");
                });

            modelBuilder.Entity("Tracker.Models.Watcher", b =>
                {
                    b.HasOne("Tracker.Models.Participant", "Participant")
                        .WithMany("Watchers")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Tracker.Models.Checkpoint", b =>
                {
                    b.Navigation("Monitors");
                });

            modelBuilder.Entity("Tracker.Models.Participant", b =>
                {
                    b.Navigation("Checkins");

                    b.Navigation("Watchers");
                });

            modelBuilder.Entity("Tracker.Models.Race", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Segments");
                });

            modelBuilder.Entity("Tracker.Models.RaceEvent", b =>
                {
                    b.Navigation("Races");
                });
#pragma warning restore 612, 618
        }
    }
}
